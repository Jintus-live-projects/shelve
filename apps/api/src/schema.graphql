enum QuantityUnit {
    GRAM
    LITER
    UNIT
}

type Quantity {
    value: Float!
    unit: QuantityUnit!
}

type Food {
    id: Int!
    name: String!
    categories: [FoodCategory!]!
    stock: [Stock!]!
}

type Location {
    id: Int!
    name: String!
    stock: [Stock!]!
}

type FoodCategory {
    id: Int!
    translateKey: String
    customName: String
    foods: [Food!]!
}

interface Stock {
    id: Int!
    food: Food!
    location: Location!
    quantity: Quantity!
}

type UnitStock implements Stock {
    id: Int!
    food: Food!
    location: Location!
    quantity: Quantity!
    expiryDate: String!
    purchaseDate: String!
}

type SealedStock implements Stock {
    id: Int!
    food: Food!
    location: Location!
    quantity: Quantity!
    expiryDate: String!
    purchaseDate: String!
}

type LooseContainer implements Stock {
    id: Int!
    food: Food!
    location: Location!
    quantity: Quantity!
    customBarCode: CustomBarCode!
    fullQuantity: Quantity!
    currentPercentage: Float!
}

type CustomBarCode {
    code: String!
    color: String!
    looseContainer: LooseContainer
}

type ProductInformation {
    code: String!
    brand: String!
    name: String!
}

input FoodListFilterInput {
    categoryId: Int
    searchQuery: String
}


type Query {
    productsInformation(barCodes: [String!]!): [ProductInformation!]!
    foods(filter: FoodListFilterInput): [Food!]!
}

input CreateFoodInput {
    name: String!
    categoryIds: [Int!]
}

input CreateFoodCategoryInput {
    name: String!
    foodIds: [Int!]
}

input CreateLocationInput {
    name: String!
}

type Mutation {
    createFood(food: CreateFoodInput!): Food!
    createFoodCategory(foodCategory: CreateFoodCategoryInput!): FoodCategory!
    createLocation(location: CreateLocationInput!): Location!
    createCustomBarCode: CustomBarCode
}
