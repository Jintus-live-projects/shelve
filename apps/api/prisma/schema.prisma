// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model FoodEntity {
    id Int @default(autoincrement()) @id
    name String @unique
    categories FoodCategoryEntity[]
    sealedStockList SealedStockEntity[]
    unitStockList UnitStockEntity[]
    looseContainers LooseContainerEntity[]
}

model FoodCategoryEntity {
    id Int @default(autoincrement()) @id
    translateKey String? @unique
    customName String? @unique
    foods FoodEntity[]
}

enum QuantityUnitEnum {
    GRAM
    LITER
    UNIT
}

model SealedStockEntity {
    id Int @default(autoincrement()) @id
    foodId Int
    food FoodEntity @relation(fields: [foodId], references: [id], onUpdate: Cascade, onDelete: Cascade)
    locationId Int
    location LocationEntity @relation(fields: [locationId], references: [id], onUpdate: Cascade, onDelete: Cascade)
    quantity Float
    unit QuantityUnitEnum
    expiryDate DateTime
    purchaseDate DateTime

    @@unique([foodId, locationId, unit])
}

model UnitStockEntity {
    id Int @default(autoincrement()) @id
    foodId Int
    food FoodEntity @relation(fields: [foodId], references: [id], onUpdate: Cascade, onDelete: Cascade)
    locationId Int
    location LocationEntity @relation(fields: [locationId], references: [id], onUpdate: Cascade, onDelete: Cascade)
    quantity Float
    unit QuantityUnitEnum
    expiryDate DateTime
    purchaseDate DateTime

    @@unique([foodId, locationId, unit])
}

model LooseContainerEntity {
    id Int @default(autoincrement()) @id
    foodId Int
    food FoodEntity @relation(fields: [foodId], references: [id], onUpdate: Cascade, onDelete: Cascade)
    locationId Int
    location LocationEntity @relation(fields: [locationId], references: [id], onUpdate: Cascade, onDelete: Cascade)
    fullQuantity Float
    unit QuantityUnitEnum
    currentPercentage Float
    customBarCode CustomBarCodeEntity?

    @@unique([foodId, locationId, unit])
}

model LocationEntity {
    id Int @default(autoincrement()) @id
    name String @unique
    sealedStockList SealedStockEntity[]
    unitStockList UnitStockEntity[]
    looseContainers LooseContainerEntity[]
}

model CustomBarCodeEntity {
    code String @id
    color String @unique
    looseContainerId Int? @unique
    looseContainer LooseContainerEntity? @relation(fields: [looseContainerId], references: [id], onUpdate: Cascade, onDelete: SetNull)
}
