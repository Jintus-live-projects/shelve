// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model FoodEntity {
    id Int @default(autoincrement()) @id
    looseStock LooseStockEntity[]
    storedStock StoredStockEntity[]
    name String
    barcode String? @unique
}

model LocationEntity {
    id Int @default(autoincrement()) @id
    name String
    temperature Float?
    looseStocks LooseStockEntity[]
    storedStocks StoredStockEntity[]
}

model LooseStockEntity {
    id Int @default(autoincrement()) @id
    food FoodEntity @relation(fields: [foodId], references: [id], onUpdate: Cascade, onDelete: Cascade)
    foodId Int
    location LocationEntity @relation(fields: [locationId], references: [id], onUpdate: Cascade, onDelete: Cascade)
    locationId Int
    filledQuantity Float
    fillingPourcentage Float
    customBarcodes CustomBarcodeEntity[]

    @@unique([foodId, locationId])
}

model StoredStockEntity {
    id Int @default(autoincrement()) @id
    food FoodEntity @relation(fields: [foodId], references: [id], onUpdate: Cascade, onDelete: Cascade)
    foodId Int
    location LocationEntity @relation(fields: [locationId], references: [id], onUpdate: Cascade, onDelete: Cascade)
    locationId Int
    quantity Float
    bestBeforeDate DateTime

    @@unique([foodId, locationId])
}

model CustomBarcodeEntity {
    id Int @default(autoincrement()) @id
    barcode String @unique
    color String @unique
    looseStock LooseStockEntity? @relation(fields: [looseStockId], references: [id], onUpdate: Cascade, onDelete: SetNull)
    looseStockId Int?
}
